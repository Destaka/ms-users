service: ms-${self:custom.serviceName}
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: 'us-east-1'
  stage: ${opt:stage, "${env:stage, 'dev'}"}
  memorySize: 512
  apiGateway:
    restApiId: ${ssm:/destaka/infra/api-gateway/id}
    restApiRootResourceId: ${ssm:/destaka/infra/api-gateway/root-resource-id}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:CreateTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:*'
  environment:
      STAGE: ${self:provider.stage}
      REGION: ${self:provider.region}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  esbuild:
    bundle: true
    minify: false
  serviceName: users
  contextPath: ${self:custom.serviceName}
  baseApi: ${self:custom.contextPath}
  funcDir: src/framework/functions

functions:
  createUser:
    handler: ${self:custom.funcDir}/createUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/
          method: post
          cors:
            origin: '*'
            headers: '*'
  getUser:
    handler: ${self:custom.funcDir}/getUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/{userId}
          method: get
          cors:
            origin: '*'
            headers: '*'
  updateUser:
    handler: ${self:custom.funcDir}/updateUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/
          method: put
          cors:
            origin: '*'
            headers: '*'
  deleteProduct:
    handler: ${self:custom.funcDir}/deleteUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/{userId}
          method: delete
          cors:
            origin: '*'
            headers: '*'